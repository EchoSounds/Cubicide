//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/BaseFiles/Scripts/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Mouse"",
            ""id"": ""7957a6e0-0272-4c06-85be-b2f3c65c0ebe"",
            ""actions"": [
                {
                    ""name"": ""Mouse Delta"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5ba3b3d7-7a79-4d15-bebe-b40c4acd7297"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""712dcaa2-2d21-4c4f-a4c8-21f8e7ddc921"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ButtonMash"",
            ""id"": ""76833813-b49c-4436-8842-acad1a300357"",
            ""actions"": [
                {
                    ""name"": ""Mash"",
                    ""type"": ""Button"",
                    ""id"": ""c440b2c6-b989-4ac9-b5a6-735d8a3ca5c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2480eae1-e1d3-49cd-808b-2e6a99a52742"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74e38882-e3dd-4d76-a24c-f70dfc548ee2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TimerQTE"",
            ""id"": ""93ee31c7-d1f1-40cd-b104-20a175c18289"",
            ""actions"": [
                {
                    ""name"": ""QTE_E"",
                    ""type"": ""Button"",
                    ""id"": ""d9f5c474-27ed-42f2-94be-3a84031f1b76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa30975c-7d52-470d-9308-2aafeadc7539"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""QTE_E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Buttons"",
            ""id"": ""e5f49b21-e3bf-4161-b42b-3d619643f898"",
            ""actions"": [
                {
                    ""name"": ""Button1"",
                    ""type"": ""Button"",
                    ""id"": ""4e706623-2ff8-485a-9788-a17206d070c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Button2"",
                    ""type"": ""Button"",
                    ""id"": ""30016451-1f13-460a-8eab-c0a1f04fa9a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a44e6365-c6af-4abe-ae07-bdc5c408653b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""481ca81f-4d91-4814-9d31-3b1aeceb35dc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Space"",
            ""id"": ""3436b5c0-f1c1-486e-af0c-915f63f72994"",
            ""actions"": [
                {
                    ""name"": ""Space"",
                    ""type"": ""Button"",
                    ""id"": ""2202cf48-bc2d-4a9a-8807-4a93347971e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a01e97ef-711f-4840-98da-a0a0b789e76d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Space"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseDelta = m_Mouse.FindAction("Mouse Delta", throwIfNotFound: true);
        // ButtonMash
        m_ButtonMash = asset.FindActionMap("ButtonMash", throwIfNotFound: true);
        m_ButtonMash_Mash = m_ButtonMash.FindAction("Mash", throwIfNotFound: true);
        // TimerQTE
        m_TimerQTE = asset.FindActionMap("TimerQTE", throwIfNotFound: true);
        m_TimerQTE_QTE_E = m_TimerQTE.FindAction("QTE_E", throwIfNotFound: true);
        // Buttons
        m_Buttons = asset.FindActionMap("Buttons", throwIfNotFound: true);
        m_Buttons_Button1 = m_Buttons.FindAction("Button1", throwIfNotFound: true);
        m_Buttons_Button2 = m_Buttons.FindAction("Button2", throwIfNotFound: true);
        // Space
        m_Space = asset.FindActionMap("Space", throwIfNotFound: true);
        m_Space_Space = m_Space.FindAction("Space", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_MouseDelta;
    public struct MouseActions
    {
        private @PlayerInputs m_Wrapper;
        public MouseActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_Mouse_MouseDelta;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @MouseDelta.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
                @MouseDelta.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMouseDelta;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseDelta.started += instance.OnMouseDelta;
                @MouseDelta.performed += instance.OnMouseDelta;
                @MouseDelta.canceled += instance.OnMouseDelta;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // ButtonMash
    private readonly InputActionMap m_ButtonMash;
    private IButtonMashActions m_ButtonMashActionsCallbackInterface;
    private readonly InputAction m_ButtonMash_Mash;
    public struct ButtonMashActions
    {
        private @PlayerInputs m_Wrapper;
        public ButtonMashActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mash => m_Wrapper.m_ButtonMash_Mash;
        public InputActionMap Get() { return m_Wrapper.m_ButtonMash; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonMashActions set) { return set.Get(); }
        public void SetCallbacks(IButtonMashActions instance)
        {
            if (m_Wrapper.m_ButtonMashActionsCallbackInterface != null)
            {
                @Mash.started -= m_Wrapper.m_ButtonMashActionsCallbackInterface.OnMash;
                @Mash.performed -= m_Wrapper.m_ButtonMashActionsCallbackInterface.OnMash;
                @Mash.canceled -= m_Wrapper.m_ButtonMashActionsCallbackInterface.OnMash;
            }
            m_Wrapper.m_ButtonMashActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Mash.started += instance.OnMash;
                @Mash.performed += instance.OnMash;
                @Mash.canceled += instance.OnMash;
            }
        }
    }
    public ButtonMashActions @ButtonMash => new ButtonMashActions(this);

    // TimerQTE
    private readonly InputActionMap m_TimerQTE;
    private ITimerQTEActions m_TimerQTEActionsCallbackInterface;
    private readonly InputAction m_TimerQTE_QTE_E;
    public struct TimerQTEActions
    {
        private @PlayerInputs m_Wrapper;
        public TimerQTEActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @QTE_E => m_Wrapper.m_TimerQTE_QTE_E;
        public InputActionMap Get() { return m_Wrapper.m_TimerQTE; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TimerQTEActions set) { return set.Get(); }
        public void SetCallbacks(ITimerQTEActions instance)
        {
            if (m_Wrapper.m_TimerQTEActionsCallbackInterface != null)
            {
                @QTE_E.started -= m_Wrapper.m_TimerQTEActionsCallbackInterface.OnQTE_E;
                @QTE_E.performed -= m_Wrapper.m_TimerQTEActionsCallbackInterface.OnQTE_E;
                @QTE_E.canceled -= m_Wrapper.m_TimerQTEActionsCallbackInterface.OnQTE_E;
            }
            m_Wrapper.m_TimerQTEActionsCallbackInterface = instance;
            if (instance != null)
            {
                @QTE_E.started += instance.OnQTE_E;
                @QTE_E.performed += instance.OnQTE_E;
                @QTE_E.canceled += instance.OnQTE_E;
            }
        }
    }
    public TimerQTEActions @TimerQTE => new TimerQTEActions(this);

    // Buttons
    private readonly InputActionMap m_Buttons;
    private IButtonsActions m_ButtonsActionsCallbackInterface;
    private readonly InputAction m_Buttons_Button1;
    private readonly InputAction m_Buttons_Button2;
    public struct ButtonsActions
    {
        private @PlayerInputs m_Wrapper;
        public ButtonsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Button1 => m_Wrapper.m_Buttons_Button1;
        public InputAction @Button2 => m_Wrapper.m_Buttons_Button2;
        public InputActionMap Get() { return m_Wrapper.m_Buttons; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ButtonsActions set) { return set.Get(); }
        public void SetCallbacks(IButtonsActions instance)
        {
            if (m_Wrapper.m_ButtonsActionsCallbackInterface != null)
            {
                @Button1.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton1;
                @Button1.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton1;
                @Button1.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton1;
                @Button2.started -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton2;
                @Button2.performed -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton2;
                @Button2.canceled -= m_Wrapper.m_ButtonsActionsCallbackInterface.OnButton2;
            }
            m_Wrapper.m_ButtonsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Button1.started += instance.OnButton1;
                @Button1.performed += instance.OnButton1;
                @Button1.canceled += instance.OnButton1;
                @Button2.started += instance.OnButton2;
                @Button2.performed += instance.OnButton2;
                @Button2.canceled += instance.OnButton2;
            }
        }
    }
    public ButtonsActions @Buttons => new ButtonsActions(this);

    // Space
    private readonly InputActionMap m_Space;
    private ISpaceActions m_SpaceActionsCallbackInterface;
    private readonly InputAction m_Space_Space;
    public struct SpaceActions
    {
        private @PlayerInputs m_Wrapper;
        public SpaceActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Space => m_Wrapper.m_Space_Space;
        public InputActionMap Get() { return m_Wrapper.m_Space; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceActions set) { return set.Get(); }
        public void SetCallbacks(ISpaceActions instance)
        {
            if (m_Wrapper.m_SpaceActionsCallbackInterface != null)
            {
                @Space.started -= m_Wrapper.m_SpaceActionsCallbackInterface.OnSpace;
                @Space.performed -= m_Wrapper.m_SpaceActionsCallbackInterface.OnSpace;
                @Space.canceled -= m_Wrapper.m_SpaceActionsCallbackInterface.OnSpace;
            }
            m_Wrapper.m_SpaceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Space.started += instance.OnSpace;
                @Space.performed += instance.OnSpace;
                @Space.canceled += instance.OnSpace;
            }
        }
    }
    public SpaceActions @Space => new SpaceActions(this);
    public interface IMouseActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
    }
    public interface IButtonMashActions
    {
        void OnMash(InputAction.CallbackContext context);
    }
    public interface ITimerQTEActions
    {
        void OnQTE_E(InputAction.CallbackContext context);
    }
    public interface IButtonsActions
    {
        void OnButton1(InputAction.CallbackContext context);
        void OnButton2(InputAction.CallbackContext context);
    }
    public interface ISpaceActions
    {
        void OnSpace(InputAction.CallbackContext context);
    }
}
